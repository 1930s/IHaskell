I have five sockets:
    - Heartbeat
    - Shell
    - Control
    - Publish
    - Raw Input

They are slightly documented here:
  http://ipython.org/ipython-doc/stable/development/messaging.html#introduction


Heartbeat:
  Summary: Echo anything it gets sent.

  IPython uses this to check that the kernel is still alive.

Shell and Control:
  Summary: Receive messages from frontend in specific format. Respond to messages.

  This single ROUTER socket allows multiple incoming connections from frontends,
  and this is the socket where requests for code execution, object information,
  prompts, etc. are made to the kernel by any frontend. The communication on this
  socket is a sequence of request/reply actions from each frontend and the
  kernel.

Publish (iopub):
  Summary: Kernel sends side effects to front ends.

  This socket is the ‘broadcast channel’ where the kernel publishes all side
  effects (stdout, stderr, etc.) as well as the requests coming from any client
  over the shell socket and its own requests on the stdin socket. There are a
  number of actions in Python which generate side effects: print() writes to
  sys.stdout, errors generate tracebacks, etc. Additionally, in a multi-client
  scenario, we want all frontends to be able to know what each other has sent to
  the kernel (this can be useful in collaborative scenarios, for example). This
  socket allows both side effects and the information about communications taking
  place with one client over the shell channel to be made available to all
  clients in a uniform manner.

Raw Input (stdin):
  Summary: Allows kernel to request raw stdin from the frontent.

  This ROUTER socket is connected to all frontends, and it allows the kernel to
  request input from the active frontend when raw_input() is called. The frontend
  that executed the code has a DEALER socket that acts as a ‘virtual keyboard’
  for the kernel while this communication is happening (illustrated in the figure
  by the black outline around the central keyboard). In practice, frontends may
  display such kernel requests using a special input widget or otherwise
  indicating that the user is to type input for the kernel instead of normal
  commands in the frontend. 
